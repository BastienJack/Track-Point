// Code generated by Kitex v0.12.3. DO NOT EDIT.

package trackpointservice

import (
	track_point "commerce/idl/track_point/kitex_gen/track-point"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"SendEvent": kitex.NewMethodInfo(
		sendEventHandler,
		newSendEventArgs,
		newSendEventResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"QueryEvent": kitex.NewMethodInfo(
		queryEventHandler,
		newQueryEventArgs,
		newQueryEventResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeleteEvent": kitex.NewMethodInfo(
		deleteEventHandler,
		newDeleteEventArgs,
		newDeleteEventResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	trackPointServiceServiceInfo                = NewServiceInfo()
	trackPointServiceServiceInfoForClient       = NewServiceInfoForClient()
	trackPointServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return trackPointServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return trackPointServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return trackPointServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "TrackPointService"
	handlerType := (*track_point.TrackPointService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "track_point",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func sendEventHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(track_point.SendEventRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(track_point.TrackPointService).SendEvent(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *SendEventArgs:
		success, err := handler.(track_point.TrackPointService).SendEvent(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SendEventResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newSendEventArgs() interface{} {
	return &SendEventArgs{}
}

func newSendEventResult() interface{} {
	return &SendEventResult{}
}

type SendEventArgs struct {
	Req *track_point.SendEventRequest
}

func (p *SendEventArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(track_point.SendEventRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SendEventArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SendEventArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SendEventArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SendEventArgs) Unmarshal(in []byte) error {
	msg := new(track_point.SendEventRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SendEventArgs_Req_DEFAULT *track_point.SendEventRequest

func (p *SendEventArgs) GetReq() *track_point.SendEventRequest {
	if !p.IsSetReq() {
		return SendEventArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SendEventArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SendEventArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SendEventResult struct {
	Success *track_point.SendEventResponse
}

var SendEventResult_Success_DEFAULT *track_point.SendEventResponse

func (p *SendEventResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(track_point.SendEventResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SendEventResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SendEventResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SendEventResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SendEventResult) Unmarshal(in []byte) error {
	msg := new(track_point.SendEventResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SendEventResult) GetSuccess() *track_point.SendEventResponse {
	if !p.IsSetSuccess() {
		return SendEventResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SendEventResult) SetSuccess(x interface{}) {
	p.Success = x.(*track_point.SendEventResponse)
}

func (p *SendEventResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SendEventResult) GetResult() interface{} {
	return p.Success
}

func queryEventHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(track_point.QueryEventRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(track_point.TrackPointService).QueryEvent(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *QueryEventArgs:
		success, err := handler.(track_point.TrackPointService).QueryEvent(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*QueryEventResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newQueryEventArgs() interface{} {
	return &QueryEventArgs{}
}

func newQueryEventResult() interface{} {
	return &QueryEventResult{}
}

type QueryEventArgs struct {
	Req *track_point.QueryEventRequest
}

func (p *QueryEventArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(track_point.QueryEventRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryEventArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryEventArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryEventArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *QueryEventArgs) Unmarshal(in []byte) error {
	msg := new(track_point.QueryEventRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var QueryEventArgs_Req_DEFAULT *track_point.QueryEventRequest

func (p *QueryEventArgs) GetReq() *track_point.QueryEventRequest {
	if !p.IsSetReq() {
		return QueryEventArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryEventArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryEventArgs) GetFirstArgument() interface{} {
	return p.Req
}

type QueryEventResult struct {
	Success *track_point.QueryEventResponse
}

var QueryEventResult_Success_DEFAULT *track_point.QueryEventResponse

func (p *QueryEventResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(track_point.QueryEventResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryEventResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryEventResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryEventResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *QueryEventResult) Unmarshal(in []byte) error {
	msg := new(track_point.QueryEventResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryEventResult) GetSuccess() *track_point.QueryEventResponse {
	if !p.IsSetSuccess() {
		return QueryEventResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryEventResult) SetSuccess(x interface{}) {
	p.Success = x.(*track_point.QueryEventResponse)
}

func (p *QueryEventResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryEventResult) GetResult() interface{} {
	return p.Success
}

func deleteEventHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(track_point.DeleteEventRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(track_point.TrackPointService).DeleteEvent(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeleteEventArgs:
		success, err := handler.(track_point.TrackPointService).DeleteEvent(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeleteEventResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeleteEventArgs() interface{} {
	return &DeleteEventArgs{}
}

func newDeleteEventResult() interface{} {
	return &DeleteEventResult{}
}

type DeleteEventArgs struct {
	Req *track_point.DeleteEventRequest
}

func (p *DeleteEventArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(track_point.DeleteEventRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeleteEventArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeleteEventArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeleteEventArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeleteEventArgs) Unmarshal(in []byte) error {
	msg := new(track_point.DeleteEventRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeleteEventArgs_Req_DEFAULT *track_point.DeleteEventRequest

func (p *DeleteEventArgs) GetReq() *track_point.DeleteEventRequest {
	if !p.IsSetReq() {
		return DeleteEventArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeleteEventArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeleteEventArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeleteEventResult struct {
	Success *track_point.DeleteEventResponse
}

var DeleteEventResult_Success_DEFAULT *track_point.DeleteEventResponse

func (p *DeleteEventResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(track_point.DeleteEventResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeleteEventResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeleteEventResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeleteEventResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeleteEventResult) Unmarshal(in []byte) error {
	msg := new(track_point.DeleteEventResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeleteEventResult) GetSuccess() *track_point.DeleteEventResponse {
	if !p.IsSetSuccess() {
		return DeleteEventResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeleteEventResult) SetSuccess(x interface{}) {
	p.Success = x.(*track_point.DeleteEventResponse)
}

func (p *DeleteEventResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeleteEventResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SendEvent(ctx context.Context, Req *track_point.SendEventRequest) (r *track_point.SendEventResponse, err error) {
	var _args SendEventArgs
	_args.Req = Req
	var _result SendEventResult
	if err = p.c.Call(ctx, "SendEvent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryEvent(ctx context.Context, Req *track_point.QueryEventRequest) (r *track_point.QueryEventResponse, err error) {
	var _args QueryEventArgs
	_args.Req = Req
	var _result QueryEventResult
	if err = p.c.Call(ctx, "QueryEvent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteEvent(ctx context.Context, Req *track_point.DeleteEventRequest) (r *track_point.DeleteEventResponse, err error) {
	var _args DeleteEventArgs
	_args.Req = Req
	var _result DeleteEventResult
	if err = p.c.Call(ctx, "DeleteEvent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
