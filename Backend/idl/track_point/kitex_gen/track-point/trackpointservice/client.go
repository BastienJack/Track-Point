// Code generated by Kitex v0.12.3. DO NOT EDIT.

package trackpointservice

import (
	track_point "commerce/idl/track_point/kitex_gen/track-point"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	SendEvent(ctx context.Context, Req *track_point.SendEventRequest, callOptions ...callopt.Option) (r *track_point.SendEventResponse, err error)
	QueryEvent(ctx context.Context, Req *track_point.QueryEventRequest, callOptions ...callopt.Option) (r *track_point.QueryEventResponse, err error)
	DeleteEvent(ctx context.Context, Req *track_point.DeleteEventRequest, callOptions ...callopt.Option) (r *track_point.DeleteEventResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kTrackPointServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kTrackPointServiceClient struct {
	*kClient
}

func (p *kTrackPointServiceClient) SendEvent(ctx context.Context, Req *track_point.SendEventRequest, callOptions ...callopt.Option) (r *track_point.SendEventResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendEvent(ctx, Req)
}

func (p *kTrackPointServiceClient) QueryEvent(ctx context.Context, Req *track_point.QueryEventRequest, callOptions ...callopt.Option) (r *track_point.QueryEventResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryEvent(ctx, Req)
}

func (p *kTrackPointServiceClient) DeleteEvent(ctx context.Context, Req *track_point.DeleteEventRequest, callOptions ...callopt.Option) (r *track_point.DeleteEventResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteEvent(ctx, Req)
}
