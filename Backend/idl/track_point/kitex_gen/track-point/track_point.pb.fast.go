// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package track_point

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *Event) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Event[number], err)
}

func (x *Event) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.EventId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *Event) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.EventName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Event) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.EventParams, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendEventRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SendEventRequest[number], err)
}

func (x *SendEventRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.JsonEventParams, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SendEventResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SendEventResponse[number], err)
}

func (x *SendEventResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *SendEventResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *QueryEventRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryEventRequest[number], err)
}

func (x *QueryEventRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Offset, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *QueryEventRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Limit, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *QueryEventResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryEventResponse[number], err)
}

func (x *QueryEventResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *QueryEventResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *QueryEventResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Event
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Events = append(x.Events, &v)
	return offset, nil
}

func (x *DeleteEventRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteEventRequest[number], err)
}

func (x *DeleteEventRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.EventId, offset, err = fastpb.ReadUint64(buf, _type)
	return offset, err
}

func (x *DeleteEventResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteEventResponse[number], err)
}

func (x *DeleteEventResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *DeleteEventResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.StatusMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Event) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Event) fastWriteField1(buf []byte) (offset int) {
	if x.EventId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetEventId())
	return offset
}

func (x *Event) fastWriteField2(buf []byte) (offset int) {
	if x.EventName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetEventName())
	return offset
}

func (x *Event) fastWriteField3(buf []byte) (offset int) {
	if x.EventParams == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetEventParams())
	return offset
}

func (x *SendEventRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *SendEventRequest) fastWriteField1(buf []byte) (offset int) {
	if x.JsonEventParams == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetJsonEventParams())
	return offset
}

func (x *SendEventResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SendEventResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *SendEventResponse) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetStatusMsg())
	return offset
}

func (x *QueryEventRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *QueryEventRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Offset == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetOffset())
	return offset
}

func (x *QueryEventRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Limit == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, x.GetLimit())
	return offset
}

func (x *QueryEventResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *QueryEventResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *QueryEventResponse) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetStatusMsg())
	return offset
}

func (x *QueryEventResponse) fastWriteField3(buf []byte) (offset int) {
	if x.Events == nil {
		return offset
	}
	for i := range x.GetEvents() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetEvents()[i])
	}
	return offset
}

func (x *DeleteEventRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *DeleteEventRequest) fastWriteField1(buf []byte) (offset int) {
	if x.EventId == 0 {
		return offset
	}
	offset += fastpb.WriteUint64(buf[offset:], 1, x.GetEventId())
	return offset
}

func (x *DeleteEventResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *DeleteEventResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *DeleteEventResponse) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetStatusMsg())
	return offset
}

func (x *Event) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Event) sizeField1() (n int) {
	if x.EventId == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetEventId())
	return n
}

func (x *Event) sizeField2() (n int) {
	if x.EventName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetEventName())
	return n
}

func (x *Event) sizeField3() (n int) {
	if x.EventParams == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetEventParams())
	return n
}

func (x *SendEventRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *SendEventRequest) sizeField1() (n int) {
	if x.JsonEventParams == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetJsonEventParams())
	return n
}

func (x *SendEventResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SendEventResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetStatusCode())
	return n
}

func (x *SendEventResponse) sizeField2() (n int) {
	if x.StatusMsg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetStatusMsg())
	return n
}

func (x *QueryEventRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *QueryEventRequest) sizeField1() (n int) {
	if x.Offset == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetOffset())
	return n
}

func (x *QueryEventRequest) sizeField2() (n int) {
	if x.Limit == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, x.GetLimit())
	return n
}

func (x *QueryEventResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *QueryEventResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetStatusCode())
	return n
}

func (x *QueryEventResponse) sizeField2() (n int) {
	if x.StatusMsg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetStatusMsg())
	return n
}

func (x *QueryEventResponse) sizeField3() (n int) {
	if x.Events == nil {
		return n
	}
	for i := range x.GetEvents() {
		n += fastpb.SizeMessage(3, x.GetEvents()[i])
	}
	return n
}

func (x *DeleteEventRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *DeleteEventRequest) sizeField1() (n int) {
	if x.EventId == 0 {
		return n
	}
	n += fastpb.SizeUint64(1, x.GetEventId())
	return n
}

func (x *DeleteEventResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *DeleteEventResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetStatusCode())
	return n
}

func (x *DeleteEventResponse) sizeField2() (n int) {
	if x.StatusMsg == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetStatusMsg())
	return n
}

var fieldIDToName_Event = map[int32]string{
	1: "EventId",
	2: "EventName",
	3: "EventParams",
}

var fieldIDToName_SendEventRequest = map[int32]string{
	1: "JsonEventParams",
}

var fieldIDToName_SendEventResponse = map[int32]string{
	1: "StatusCode",
	2: "StatusMsg",
}

var fieldIDToName_QueryEventRequest = map[int32]string{
	1: "Offset",
	2: "Limit",
}

var fieldIDToName_QueryEventResponse = map[int32]string{
	1: "StatusCode",
	2: "StatusMsg",
	3: "Events",
}

var fieldIDToName_DeleteEventRequest = map[int32]string{
	1: "EventId",
}

var fieldIDToName_DeleteEventResponse = map[int32]string{
	1: "StatusCode",
	2: "StatusMsg",
}
