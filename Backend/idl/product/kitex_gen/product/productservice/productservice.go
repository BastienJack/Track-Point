// Code generated by Kitex v0.7.0. DO NOT EDIT.

package productservice

import (
	product "commerce/idl/product/kitex_gen/product"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return productServiceServiceInfo
}

var productServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ProductService"
	handlerType := (*product.ProductService)(nil)
	methods := map[string]kitex.MethodInfo{
		"SearchProduct":  kitex.NewMethodInfo(searchProductHandler, newSearchProductArgs, newSearchProductResult, false),
		"GetProduct":     kitex.NewMethodInfo(getProductHandler, newGetProductArgs, newGetProductResult, false),
		"GetProductList": kitex.NewMethodInfo(getProductListHandler, newGetProductListArgs, newGetProductListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "product",
		"ServiceFilePath": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func searchProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.SearchProductRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).SearchProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *SearchProductArgs:
		success, err := handler.(product.ProductService).SearchProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*SearchProductResult)
		realResult.Success = success
	}
	return nil
}
func newSearchProductArgs() interface{} {
	return &SearchProductArgs{}
}

func newSearchProductResult() interface{} {
	return &SearchProductResult{}
}

type SearchProductArgs struct {
	Req *product.SearchProductRequest
}

func (p *SearchProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.SearchProductRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SearchProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SearchProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SearchProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *SearchProductArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(product.SearchProductRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var SearchProductArgs_Req_DEFAULT *product.SearchProductRequest

func (p *SearchProductArgs) GetReq() *product.SearchProductRequest {
	if !p.IsSetReq() {
		return SearchProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SearchProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SearchProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type SearchProductResult struct {
	Success *product.SearchProductResponse
}

var SearchProductResult_Success_DEFAULT *product.SearchProductResponse

func (p *SearchProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.SearchProductResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SearchProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SearchProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SearchProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *SearchProductResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(product.SearchProductResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SearchProductResult) GetSuccess() *product.SearchProductResponse {
	if !p.IsSetSuccess() {
		return SearchProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SearchProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.SearchProductResponse)
}

func (p *SearchProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SearchProductResult) GetResult() interface{} {
	return p.Success
}

func getProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.GetProductRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).GetProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetProductArgs:
		success, err := handler.(product.ProductService).GetProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetProductResult)
		realResult.Success = success
	}
	return nil
}
func newGetProductArgs() interface{} {
	return &GetProductArgs{}
}

func newGetProductResult() interface{} {
	return &GetProductResult{}
}

type GetProductArgs struct {
	Req *product.GetProductRequest
}

func (p *GetProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.GetProductRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetProductArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(product.GetProductRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetProductArgs_Req_DEFAULT *product.GetProductRequest

func (p *GetProductArgs) GetReq() *product.GetProductRequest {
	if !p.IsSetReq() {
		return GetProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetProductResult struct {
	Success *product.GetProductResponse
}

var GetProductResult_Success_DEFAULT *product.GetProductResponse

func (p *GetProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.GetProductResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetProductResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(product.GetProductResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetProductResult) GetSuccess() *product.GetProductResponse {
	if !p.IsSetSuccess() {
		return GetProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.GetProductResponse)
}

func (p *GetProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductResult) GetResult() interface{} {
	return p.Success
}

func getProductListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(product.GetProductListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(product.ProductService).GetProductList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetProductListArgs:
		success, err := handler.(product.ProductService).GetProductList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetProductListResult)
		realResult.Success = success
	}
	return nil
}
func newGetProductListArgs() interface{} {
	return &GetProductListArgs{}
}

func newGetProductListResult() interface{} {
	return &GetProductListResult{}
}

type GetProductListArgs struct {
	Req *product.GetProductListRequest
}

func (p *GetProductListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(product.GetProductListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetProductListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetProductListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetProductListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetProductListArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(product.GetProductListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetProductListArgs_Req_DEFAULT *product.GetProductListRequest

func (p *GetProductListArgs) GetReq() *product.GetProductListRequest {
	if !p.IsSetReq() {
		return GetProductListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetProductListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetProductListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetProductListResult struct {
	Success *product.GetProductListResponse
}

var GetProductListResult_Success_DEFAULT *product.GetProductListResponse

func (p *GetProductListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(product.GetProductListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetProductListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetProductListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetProductListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetProductListResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(product.GetProductListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetProductListResult) GetSuccess() *product.GetProductListResponse {
	if !p.IsSetSuccess() {
		return GetProductListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetProductListResult) SetSuccess(x interface{}) {
	p.Success = x.(*product.GetProductListResponse)
}

func (p *GetProductListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductListResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) SearchProduct(ctx context.Context, Req *product.SearchProductRequest) (r *product.SearchProductResponse, err error) {
	var _args SearchProductArgs
	_args.Req = Req
	var _result SearchProductResult
	if err = p.c.Call(ctx, "SearchProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProduct(ctx context.Context, Req *product.GetProductRequest) (r *product.GetProductResponse, err error) {
	var _args GetProductArgs
	_args.Req = Req
	var _result GetProductResult
	if err = p.c.Call(ctx, "GetProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetProductList(ctx context.Context, Req *product.GetProductListRequest) (r *product.GetProductListResponse, err error) {
	var _args GetProductListArgs
	_args.Req = Req
	var _result GetProductListResult
	if err = p.c.Call(ctx, "GetProductList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
